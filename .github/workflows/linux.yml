
name: Linux

on:
  push:
    branches: [ "main" ]
    tags:
  pull_request:
    branches: [ "main" ]

jobs:
  linux:
    name: linux-${{ matrix.config.name }}
    runs-on: ubuntu-latest
    container:
      image: centos:7
    env:
      CMAKE_VERSION: 3.28.1
      NINJA_VERSION: 1.11.1

    strategy:
      fail-fast: false
      matrix:
        config:
        - { name: static, flags: -DBUILD_SHARED_LIBS=0 }
        - { name: shared, flags: -DBUILD_SHARED_LIBS=1 }

    steps:
    - uses: actions/checkout@v3

    - name: "Cache CMake"
      id: cache-cmake
      uses: actions/cache@v2
      with:
        path: cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh
        key: ${{ runner.os }}-cmake-${{ env.CMAKE_VERSION }}

    - name: "Download CMake"
      if: steps.cache-cmake.outputs.cache-hit != 'true'
      run: |
        curl -L -O https://cmake.org/files/v3.28/cmake-${CMAKE_VERSION}-linux-x86_64.sh
        chmod +x cmake-${CMAKE_VERSION}-linux-x86_64.sh

    - name: "Install CMake"
      run: ./cmake-${CMAKE_VERSION}-linux-x86_64.sh --prefix=/usr/local --skip-license

    - name: "Install Ninja"
      run: |
        curl -L -o ninja-linux.zip https://github.com/ninja-build/ninja/releases/download/v${NINJA_VERSION}/ninja-linux.zip
        yum install -y unzip
        unzip ninja-linux.zip -d /usr/local/bin

    - name: Install system dependencies
      run: yum install -y make gcc gcc-c++

    - name: Cache dependency binaries
      id: cache-depbin
      uses: actions/cache@v2
      with:
        path: deps
        key: linux-depbin-${{ hashFiles('scripts/make-dependencies.sh') }}
        restore-keys: linux-depbin-

    - name: Cache dependency sources
      if: steps.cache-depbin.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      with:
        path: pkgs
        key: depsrc-${{ hashFiles('scripts/make-dependencies.sh') }}
        restore-keys: depsrc-

    - name: Build dependencies
      if: steps.cache-depbin.outputs.cache-hit != 'true'
      run: scripts/make-dependencies.sh

    - name: Configure
      run: >
        cmake -B build -G "Ninja Multi-Config"
        ${{ matrix.build.flags }}
        ${{ matrix.config.flags }}
        -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/deps
        -DTYHYLGE_USE_FREETYPE=1

    - name: Build (Debug)
      run: |
        cmake --build build --config Debug
        cmake --install build --config Debug --prefix install/tyhylge-dbg

    - name: Build (Release)
      run: |
        cmake --build build --config Release
        cmake --install build --config Release --prefix install/tyhylge-rel

    - name: Collect static dependencies
      if: matrix.config.name == 'static'
      run: |
        [ -d deps/lib ] && mkdir -p install/tyhylge-dbg/lib && cp -v deps/lib/*.a install/tyhylge-dbg/lib
        [ -d deps/lib ] && mkdir -p install/tyhylge-rel/lib && cp -v deps/lib/*.a install/tyhylge-rel/lib
        [ -d deps/lib64 ] && mkdir -p install/tyhylge-dbg/lib64 && cp -v deps/lib64/*.a install/tyhylge-dbg/lib64
        [ -d deps/lib64 ] && mkdir -p install/tyhylge-rel/lib64 && cp -v deps/lib64/*.a install/tyhylge-rel/lib64

    - uses: actions/upload-artifact@v3
      with:
        name: tyhylge-linux-${{ matrix.config.name }}-amd64
        path: install/*

    - uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags')
      with:
        files: |
          install/*
          README.md

